TestCase subclass: #PruebaAvionesEnemigos	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP1-92079-Pruebas'!!PruebaAvionesEnemigos methodsFor: 'as yet unclassified' stamp: 'JavierChoque 4/21/2011 12:41'!testAvionGuia	"en este escenario de 20x20, creamos un jugador en el origen, y un avion guia, el mas poderoso del juego, el cual le disparará al jugador hasta matarlo."		|  e j g auxVidas |		e := Escenario crearConTamano:   20.	j := Jugador crearConEscenario: e EnX: 10 EnY: 0.   	auxVidas := (j getVidas ).		g := AvionGuia crearConEscenario: e EnX: 15 EnY: 20.  	e agregarObjetoMovil: j; agregarObjetoMovil: g.  		100 timesRepeat: [		e gameLoop. 	]. 	self should: ((j estaVivo) = false ) description:   'El Avion Guia no destruyo al jugador'.	! !!PruebaAvionesEnemigos methodsFor: 'as yet unclassified' stamp: 'JavierChoque 4/21/2011 17:24'!testBomBardero	"en este escenario de 20x20, creamos un jugador en el origen, y un bombardero, el cual por naturaleza le disparará al jugador hasta matarlo."	| e j b auxVidas |		e := Escenario crearConTamano:   20.	j := Jugador crearConEscenario: e EnX: 10 EnY: 5.   	auxVidas := (j getVidas ).	b := Bombardero crearConEscenario: e EnX: 10 EnY: 20.  	e agregarObjetoMovil: j; agregarObjetoMovil: b.  		100 timesRepeat: [		e gameLoop. 	]. 		self should: (j getVidas < auxVidas) description:   'El bombardero no mato al jugador'.	! !!PruebaAvionesEnemigos methodsFor: 'as yet unclassified' stamp: 'JavierChoque 4/21/2011 12:33'!testChoqueAvionetas	"en este escenario de 10x10, creamos un jugador en (5,5) y dos avionetas, una a la izquierda, y otra a la derecha. Las avionetas deberian dirigirse al jugador, y atacarlo por impacto."	|  e j a1 a2 auxEnergia auxEnergiaJugador |		e := Escenario crearConTamano:   10.	j := Jugador crearConEscenario: e EnX: 5 EnY: 5.   			a1 := Avioneta  crearConEscenario: e EnX: 0 EnY: 5.  	a2 := Avioneta crearConEscenario: e EnX: 10 EnY: 5.	auxEnergia := a1 getEnergia .	auxEnergiaJugador := j getEnergia .		e agregarObjetoMovil: j; agregarObjetoMovil: a1; agregarObjetoMovil: a2.  		6 timesRepeat: [		e gameLoop. 	]. 		self should: (a1 getEnergia < auxEnergia ) description:   'las avionetas chocaron entre si.'.	self should: (j getEnergia < auxEnergiaJugador) description: 'el jugador no resulto dañado.'! !!PruebaAvionesEnemigos methodsFor: 'as yet unclassified' stamp: 'JavierChoque 4/21/2011 17:24'!testMunicion	"en este escenario de 20x20, creamos un jugador en el origen, y un bombardero, el cual por naturaleza le disparará al jugador hasta matarlo."	| e j b auxVidas |		e := Escenario crearConTamano:   20.	j := Jugador crearConEscenario: e EnX: 10 EnY: 5.   	auxVidas := (j getVidas ).	b := Bombardero crearConEscenario: e EnX: 10 EnY: 20.  	e agregarObjetoMovil: j; agregarObjetoMovil: b.  	b setIA: (QuedarseQuieto crearPara: b).		110 timesRepeat: [		b disparar .		e gameLoop. 	]. 		self should: (b getArmaActual getMunicion = 0) description:   'El bombardero no gasto su municion'.	self should: (j getVidas < 3) description:   'El jugador no perdio'.! !TestCase subclass: #PruebasDisparos	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP1-92079-Pruebas'!!PruebasDisparos methodsFor: 'as yet unclassified' stamp: 'JavierChoque 4/18/2011 13:29'!testDisparoConValorNegativo	| d j e |	e := Escenario crearConTamano: 100.		j := Jugador crearConEscenario: e EnX: 10 EnY: 10.	self should: [d := DisparoSimple crearConEscenario: e ConAtaque: -100 ConPosicion: (Posicion crearConX: 5 ConY: 5). ] raise: ValorDeAtaqueNegativo description: 'permite disparos de valor negativo de ataque.'.		! !!PruebasDisparos methodsFor: 'as yet unclassified' stamp: 'JavierChoque 4/19/2011 00:08'!testDisparoDirigido	|  e j d auxEnergia |		e := Escenario crearConTamano:   100.	j := Jugador crearConEscenario: e EnX: 5 EnY: 5.   	auxEnergia := (j getEnergia ).		d := DisparoDirigido crearConEscenario: e ConAtaque: 10 ConPosicion: (Posicion crearConX: 90 ConY: 90  ).	e agregarObjetoMovil: j; agregarObjetoMovil: d.  		100 timesRepeat: [		e gameLoop. 	]. 		self should: (j getEnergia < auxEnergia) description:   'El disparo dirigido no impacto en jugador'.	! !!PruebasDisparos methodsFor: 'as yet unclassified' stamp: 'JavierChoque 4/19/2011 00:08'!testEsquivarDisparoDirigido	|  e j d auxEnergia |		e := Escenario crearConTamano:   100.	j := Jugador crearConEscenario: e EnX: 5 EnY: 5.   	auxEnergia := (j getEnergia ).		d := DisparoDirigido crearConEscenario: e ConAtaque: 10 ConPosicion: (Posicion crearConX: 91 ConY: 90  ).	e agregarObjetoMovil: j; agregarObjetoMovil: d.  		100 timesRepeat: [		e gameLoop. 	]. 		self should: (j getEnergia = 1000) description:   'El disparo dirigido impacto en jugador'.	! !!PruebasDisparos methodsFor: 'as yet unclassified' stamp: 'JavierChoque 4/19/2011 00:08'!testEsquivarDisparoDirigidoPorMovimientoPropio	|  e j d auxEnergia |		e := Escenario crearConTamano:   100.	j := Jugador crearConEscenario: e EnX: 5 EnY: 5.   	auxEnergia := (j getEnergia ).		d := DisparoDirigido crearConEscenario: e ConAtaque: 10 ConPosicion: (Posicion crearConX: 90 ConY: 90  ).	e agregarObjetoMovil: j; agregarObjetoMovil: d.  		50 timesRepeat: [		e gameLoop. 	]. 	j moverDerecha .	50 timesRepeat: [		e gameLoop. 	]. 			self should: (j getEnergia = auxEnergia) description:   'El jugador no esquivo el disparo.'.	! !!PruebasDisparos methodsFor: 'as yet unclassified' stamp: 'JavierChoque 4/19/2011 00:12'!testMultiplesDisparosDirigidos	"en este escenario de 100x100, creamos un jugador en (50,50) y 5 disparos dirigidos en diagonal, lateralmente, arriba y abajo de la posicion del jugador. Como los disparos dirigidos apunta al jugador una vez, y luego siguen su marcha, entonces los 5 deberian impactar en el jugador y restarle 50 puntos de energia."	|  e j d1 d2 d3 d4 d5 auxEnergia |		e := Escenario crearConTamano:   100.	j := Jugador crearConEscenario: e EnX: 50 EnY: 50.   	e agregarObjetoMovil: j.	auxEnergia := (j getEnergia ).		d1 := DisparoDirigido crearConEscenario: e ConAtaque: 10 ConPosicion: (Posicion crearConX: 50 ConY: 0  ).	e agregarObjetoMovil: d1.  	d2 := DisparoDirigido crearConEscenario: e ConAtaque: 10 ConPosicion: (Posicion crearConX: 0 ConY: 0  ).	e agregarObjetoMovil: d2.  	d3 := DisparoDirigido crearConEscenario: e ConAtaque: 10 ConPosicion: (Posicion crearConX: 0 ConY: 100  ).	e agregarObjetoMovil: d3.  	d4 := DisparoDirigido crearConEscenario: e ConAtaque: 10 ConPosicion: (Posicion crearConX: 80 ConY: 20  ).	e agregarObjetoMovil: d4.  	d5 := DisparoDirigido crearConEscenario: e ConAtaque: 10 ConPosicion: (Posicion crearConX: 100 ConY: 50  ).	e agregarObjetoMovil: d5.  		j setIA: (QuedarseQuieto crearPara: j).		100 timesRepeat: [		e gameLoop. 	]. 		self should: (j getEnergia = 950) description:   'El disparo dirigido no impacto en jugador'.	! !!PruebasDisparos methodsFor: 'as yet unclassified' stamp: 'JavierChoque 4/21/2011 01:06'!testTorpedoRastreadorMuyLejano	"en este escenario de 1000x1000, creamos un jugador en (50,50) y un torpedo rastreador en (900,900). El torpedo no deberia impactar en el jugador, pues el tiempo de vida del jugador es de 100 gameloops."	|  e j d auxEnergia |		e := Escenario crearConTamano:   1000.	j := Jugador crearConEscenario: e EnX: 50 EnY: 50.   	auxEnergia := (j getEnergia ).		d := DisparoRastreador crearConEscenario: e ConAtaque: 10 ConPosicion: (Posicion crearConX: 900 ConY: 900  ) ConObjetivo: j.	e agregarObjetoMovil: j; agregarObjetoMovil: d.  		j setIA: (DeIzquierdaADerecha crearPara: j).		200 timesRepeat: [		e gameLoop. 	]. 		self should: (j getEnergia = auxEnergia) description:   'El torpedo impacto en el jugador'.! !TestCase subclass: #PruebasEscenario	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP1-92079-Pruebas'!!PruebasEscenario methodsFor: 'as yet unclassified' stamp: 'JavierChoque 4/18/2011 17:05'!testAgregarObjetoDoble	"en esta prueba, intentaremos ingresar dos veces al mismo avion ."	| e a j |	e := Escenario crearConTamano: 100.	j := Jugador crearConEscenario: e EnX: 10 EnY: 10.	e agregarObjetoMovil: j.		a := Avioneta crearConEscenario: e EnX: 25 EnY: 25.	self should: [e agregarObjetoMovil: a; agregarObjetoMovil: a. ] raise: ObjetoDuplicado  description: 'Permite agregar objetos duplicados.'.	! !!PruebasEscenario methodsFor: 'as yet unclassified' stamp: 'JavierChoque 4/21/2011 02:36'!testAvionetaSinJugador	"en esta prueba intentaremos crear una avioneta antes de crear un jugador. SIEMPRE se debe crear un jugador inmediatamente despues de crear al escenario."	|  e a |		e := Escenario crearConTamano:   100.		self should: [ a := Avioneta  crearConEscenario: e EnX: 0 EnY: 5. ] raise: EscenarioSinJugador description:   'Permite agregar avionetas sin jugador en escenario.'.	! !!PruebasEscenario methodsFor: 'as yet unclassified' stamp: 'JavierChoque 4/21/2011 01:10'!testEliminarObjeto	"En esta prueba, intentaremos eliminar a un objeto que no fue agregado antes al escenario"	| e a j |	e := Escenario crearConTamano: 100.	j := Jugador crearConEscenario: e EnX: 10 EnY: 10.	e agregarObjetoMovil: j.	a := Avioneta crearConEscenario: e EnX: 50 EnY: 50.		self should: [e informarDestruccion: a] raise: ObjetoAusente description: 'Permite eliminar objetos no existentes.'.	! !!PruebasEscenario methodsFor: 'as yet unclassified' stamp: 'JavierChoque 4/18/2011 17:03'!testGetJugador	"en esta prueba, intentaremos obtener al jugador del escenario, sin haberlo definido antes."	| e j |	e := Escenario crearConTamano: 100.	self should: [j := e getJugador. ] raise: EscenarioSinJugador  description: 'Permite encontrar al jugador aunque no se definio quien es.'.	! !!PruebasEscenario methodsFor: 'as yet unclassified' stamp: 'JavierChoque 4/18/2011 17:02'!testPosicionIncorrecta	"en esta prueba, intentaremos crear un bombardero con ubicacion incorrecta (fuera del escenario)."	| e j b |	e := Escenario crearConTamano: 10.	j := Jugador crearConEscenario: e EnX: 5 EnY: 5.			self should: [b := Bombardero crearConEscenario: e EnX: -50 EnY: 1520. ] raise: PosicionIncorrecta description: 'Permite posiciones incorrectas.'.	! !!PruebasEscenario methodsFor: 'as yet unclassified' stamp: 'JavierChoque 4/21/2011 16:49'!testSalirseDeLosLimites	| e j |	e := Escenario crearConTamano: 10.	j := Jugador crearConEscenario: e EnX: 5 EnY: 5.		15 timesRepeat: [		j subir .		].	self should: (j getPosicion getY <= 10) description: 'Permite salirse del escenario por arriba.'.	self should: (j estaEnBorde ) description: 'No esta en borde.'.			15 timesRepeat: [		j bajar.		].	self should: (j getPosicion getY >= 0) description: 'Permite salirse del escenario por debajo.'.	self should: (j estaEnBorde ) description: 'No esta en borde.'.		15 timesRepeat: [		j moverIzquierda .		].	self should: (j getPosicion getX >= 0) description: 'Permite salirse del escenario por izquierda.'.	self should: (j estaEnBorde ) description: 'No esta en borde.'.		15 timesRepeat: [		j moverDerecha  .		].	self should: (j getPosicion getX <= 10) description: 'Permite salirse del escenario por derecha.'.	self should: (j estaEnBorde ) description: 'No esta en borde.'.	! !!PruebasEscenario methodsFor: 'as yet unclassified' stamp: 'JavierChoque 4/18/2011 11:04'!testTamanio	| e |	self should: [e := Escenario crearConTamano: -10.] raise: TamanoIncorrecto  description: 'Permite tamaños de escenarios negativos.'.	! !TestCase subclass: #PruebasFlota	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP1-92079-Pruebas'!!PruebasFlota methodsFor: 'as yet unclassified' stamp: 'JavierChoque 4/21/2011 18:49'!testIngresarAviones	| e f j auxEnergia |	e := Escenario crearConTamano: 10.	j := Jugador crearConEscenario: e EnX: 5 EnY: 2.	auxEnergia  := j getEnergia .	e agregarObjetoMovil: j.	f := Flota crearConEscenario: e ConLimite: 100.		150 timesRepeat: [		e gameLoop.		].	self should: (j estaVivo  = false ) description: 'el jugador no perdio todas sus vidas.'.		! !TestCase subclass: #PruebasJugador	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP1-92079-Pruebas'!!PruebasJugador methodsFor: 'as yet unclassified' stamp: 'JavierChoque 4/19/2011 00:06'!testBonusEnergia	"en este escenario de 100x100, creamos un jugador en 5,5 y una bonus de energia en la misma ubicacion. Despues de un gameloop, el jugador deberia haber ganado 500 puntos de energia. "			|  e j d1 d2 auxEnergia bonus |		e := Escenario crearConTamano:   100.	j := Jugador crearConEscenario: e EnX: 5 EnY: 5.   	auxEnergia := j getEnergia .		bonus := BonusEnergia crearConEscenario: e EnX: 5 EnY: 5.		e agregarObjetoMovil: j; agregarObjetoMovil: bonus .			2 timesRepeat: [		e gameLoop. 	]. 		self should: (j getEnergia > auxEnergia  ) description:   'El jugador no ganó energia.'.	self should: (j getEnergia = (auxEnergia + 500)  ) description:   'El jugador no ganó la energia correcta.'.	! !!PruebasJugador methodsFor: 'as yet unclassified' stamp: 'JavierChoque 4/19/2011 00:07'!testBonusPuntuacion	"en este escenario de 100x100, creamos un jugador en 5,5 y una bonus de 1000 puntos en la misma ubicacion. Despues de un gameloop, el jugador deberia haber ganado esos puntos. "			|  e j d1 d2 bonus |		e := Escenario crearConTamano:   100.	j := Jugador crearConEscenario: e EnX: 5 EnY: 5.   		bonus := BonusPuntos  crearConEscenario: e EnX: 5 EnY: 5.		e agregarObjetoMovil: j; agregarObjetoMovil: bonus .			2 timesRepeat: [		e gameLoop. 	]. 		self should: (j getPuntuacion > 0  ) description:   'El jugador no ganó puntos.'.! !!PruebasJugador methodsFor: 'as yet unclassified' stamp: 'JavierChoque 4/21/2011 00:42'!testBonusVidas	"en este escenario de 100x100, creamos un jugador en 5,5 y una vida extra en la misma ubicacion. Despues de un gameloop, el jugador, que permanece quieto, deberia haber ganado una vida. "			|  e j auxVidas bonus |		e := Escenario crearConTamano:   100.	j := Jugador crearConEscenario: e EnX: 5 EnY: 5.   	auxVidas := j getVidas .		bonus := BonusVidaExtra  crearConEscenario: e EnX: 5 EnY: 5.		e agregarObjetoMovil: j; agregarObjetoMovil: bonus .			5 timesRepeat: [		e gameLoop. 	]. 		self should: (j getVidas = 4  ) description:   'El jugador no ganó una vida.'.! !!PruebasJugador methodsFor: 'as yet unclassified' stamp: 'JavierChoque 4/21/2011 12:46'!testChoqueDisparos	"en este escenario de 100x100, creamos un jugador en 5,5 y dos disparos dirigidos, a izquierda y derecha del jugador. Deberian impactarle."	|  e j d1 d2 auxEnergia|		e := Escenario crearConTamano:   100.	j := Jugador crearConEscenario: e EnX: 5 EnY: 5.   	auxEnergia := j getEnergia .		d1 := DisparoDirigido  crearConEscenario: e ConAtaque: 100 ConPosicion: (Posicion crearConX: 0 ConY: 5).	d2 := DisparoDirigido  crearConEscenario: e ConAtaque: 100 ConPosicion: (Posicion crearConX: 10 ConY: 5).	e agregarObjetoMovil: j; agregarObjetoMovil: d1; agregarObjetoMovil: d2.  		5 timesRepeat: [		e gameLoop. 	]. 	"los disparos deberian haber dañado al jugador."	self should: (j getEnergia < auxEnergia  ) description:   'El jugador no se dañó.'.! !!PruebasJugador methodsFor: 'as yet unclassified' stamp: 'JavierChoque 4/21/2011 03:08'!testDestruccionDelJugador	"en esta prueba creo un jugador que se queda quieto y 4 torpedos rastreadores en varias ubicaciones del escenario, los cuales deberian eliminar al jugador despues de un tiempo."	|  e j d |		e := Escenario crearConTamano:   100.	j := Jugador crearConEscenario: e EnX: 70 EnY: 70.   		d := DisparoRastreador crearConEscenario: e ConAtaque: 250 ConPosicion: (Posicion crearConX: 0 ConY: 10  ) ConObjetivo: j.		e agregarObjetoMovil: d. 	d := DisparoRastreador crearConEscenario: e ConAtaque: 250 ConPosicion: (Posicion crearConX: 50 ConY: 10  ) ConObjetivo: j.		e agregarObjetoMovil: d. 	d := DisparoRastreador crearConEscenario: e ConAtaque: 250 ConPosicion: (Posicion crearConX: 70 ConY: 50  ) ConObjetivo: j.		e agregarObjetoMovil: d. 	d := DisparoRastreador crearConEscenario: e ConAtaque: 250 ConPosicion: (Posicion crearConX: 80 ConY: 10  ) ConObjetivo: j.		e agregarObjetoMovil: d. 		e agregarObjetoMovil: j.		100 timesRepeat: [		e gameLoop. 	]. 	self should: (j getVidas = 2) description:   'El jugador no perdio una vida'.	"al perder una vida, el jugador recobra su energia inicial."	self should: (j getEnergia = 1000) description: 'El jugador no recobro su energia inicial'	! !!PruebasJugador methodsFor: 'as yet unclassified' stamp: 'JavierChoque 4/21/2011 01:35'!testGanarArmaNuevaDispararlaYHerirAUnEnemigo	|  e j a arma auxEnergia |	"creo un escenario y un jugador"	e := Escenario crearConTamano:   100.	j := Jugador crearConEscenario: e EnX: 5 EnY: 5.   	"creamos una avioneta fija a 10 unidades arriba del jugador"	a := Avioneta crearConEscenario: e EnX: 5 EnY: 20.	auxEnergia := a getEnergia .		a setIA: (QuedarseQuieto crearPara: a).	"creamos una arma justo delante del jugador"	arma := BonusArmaNueva crearConEscenario: e EnX: 5 EnY: 6 ConArma: (TorpedoSimple crear).		"ingresamos los personajes en el escenario"	e agregarObjetoMovil: j; agregarObjetoMovil: a; agregarObjetoMovil: arma.		e gameLoop .	"hacemos subir al jugador una unidad, deberia agarrar el arma y agregarla a su armamento"	j subir.		e gameLoop .		"El arma actual sigue siendo el laser. Cambiamos de arma para disparar el torpedo, que es el arma que agregamos en el paso anterior."	j cambiarArma .		e gameLoop .	"disparamos, deberia disparar el torpedo."	j disparar .		100 timesRepeat: [		e gameLoop. 	]. 	"un torpedo tiene un ataque de 100, por lo tanto es suficiente para derribar una avioneta."	self should: (a getEnergia = (auxEnergia - 100)) description:   'El jugador no disparo el torpedo.'.	"verificamos que la avioneta este sin energia."	self should: (a getEnergia = 0) description:   'La avioneta no fue derribada.'.	! !!PruebasJugador methodsFor: 'as yet unclassified' stamp: 'JavierChoque 4/19/2011 00:07'!testJugadorDisparar	"en este escenario de 100x100, creamos un jugador en (5,5) y una avioneta en (5,15) (arriba del jugador). "		|  e j a auxEnergia|		e := Escenario crearConTamano:   100.	j := Jugador crearConEscenario: e EnX: 5 EnY: 5.   		a := Avioneta crearConEscenario: e EnX: 5 EnY: 15.  	auxEnergia := a getEnergia.	e agregarObjetoMovil: j; agregarObjetoMovil: a.		a setIA: (QuedarseQuieto crearPara: a).		"hacemos un solo disparo, y verificamos el daño en la avioneta enemiga."		j disparar.		10 timesRepeat: [		e gameLoop. 	]. 	self should: (a getEnergia < auxEnergia ) description: 'El avion no fue dañado.'.! !!PruebasJugador methodsFor: 'as yet unclassified' stamp: 'JavierChoque 4/21/2011 12:48'!testJugadorDispararYSumarPuntaje	"en este escenario de 100x100, creamos un jugador en 5,5 y una avioneta en 5,15 (arriba del jugador). "		|  e j a |		e := Escenario crearConTamano:   100.	j := Jugador crearConEscenario: e EnX: 5 EnY: 5.   		a := Avioneta crearConEscenario: e EnX: 5 EnY: 15.  	e agregarObjetoMovil: j; agregarObjetoMovil: a.		"ambos permaneceran quietos"	a setIA: (QuedarseQuieto crearPara: a).		15 timesRepeat: [		"disparamos hasta derribar a la avioneta. recordar que el jugador solo dispara hacia arriba"		j disparar.		e gameLoop. 	]. 	self should: (j getPuntuacion > 0 ) description: 'El jugador no gano puntos.'.	self should: (j getPuntuacion = 20 ) description: 'El jugador no gano puntos.'.! !!PruebasJugador methodsFor: 'as yet unclassified' stamp: 'JavierChoque 4/21/2011 01:07'!testTorpedoRastreador	"en este escenario de 100x100, creamos un jugador en (5,5) y un torpedo ratreador muy cerca, en (10,10). El torpedo deberia impactar en el jugador, que esta quieto."		|  e j d auxEnergia |		e := Escenario crearConTamano:   100.	j := Jugador crearConEscenario: e EnX: 5 EnY: 5.   	auxEnergia := (j getEnergia ).		d := DisparoRastreador crearConEscenario: e ConAtaque: 10 ConPosicion: (Posicion crearConX: 10 ConY: 10  ) ConObjetivo: j.	e agregarObjetoMovil: j; agregarObjetoMovil: d.  			10 timesRepeat: [		e gameLoop. 	]. 		self should: (j getEnergia < auxEnergia) description:   'El torpedo no impacto en jugador'.	! !!PruebasJugador methodsFor: 'as yet unclassified' stamp: 'JavierChoque 4/21/2011 01:07'!testTorpedoRastreadorConJugadorEnMovimiento	"en este escenario de 100x100, creamos un jugador en (50,50) y un torpedo ratreador en (90,80). El torpedo deberia impactar en el jugador, que se mueve alrededor del escenario.."	|  e j d auxEnergia |		e := Escenario crearConTamano:   100.	j := Jugador crearConEscenario: e EnX: 50 EnY: 50.   	auxEnergia := (j getEnergia ).		d := DisparoRastreador crearConEscenario: e ConAtaque: 10 ConPosicion: (Posicion crearConX: 50 ConY: 90  ) ConObjetivo: j.	e agregarObjetoMovil: j; agregarObjetoMovil: d.  			110 timesRepeat: [		e gameLoop. 	]. 		self should: (j getEnergia < auxEnergia) description:   'El torpedo no impacto en jugador'.	! !!PruebasJugador methodsFor: 'as yet unclassified' stamp: 'JavierChoque 4/21/2011 01:08'!testTorpedoRastreadorLejano	"en este escenario de 100x100, creamos un jugador en 5,5 y un torpedo ratreador en 90,80. El torpedo deberia impactar en el jugador, que esta quieto."	|  e j d auxEnergia |		e := Escenario crearConTamano:   100.	j := Jugador crearConEscenario: e EnX: 5 EnY: 5.   	auxEnergia := (j getEnergia ).		d := DisparoRastreador crearConEscenario: e ConAtaque: 10 ConPosicion: (Posicion crearConX: 90 ConY: 80  ) ConObjetivo: j.	e agregarObjetoMovil: j; agregarObjetoMovil: d.  			100 timesRepeat: [		e gameLoop. 	]. 		self should: (j getEnergia < auxEnergia) description:   'El torpedo no impacto en jugador'.	! !